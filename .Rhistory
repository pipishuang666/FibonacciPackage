# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=10, level = c(99.5))
forecast
plot(forecast(model2, h=10, level = c(99.5)),xlab="时间",ylab="剂量")
library(forecast)
library(tseries)
library(fUnitRoots)
terrorism_num=c(290,186,292,757,551,631,824,753)
# 时间序列（使用ts()函数进行时间序列转化）
terr_num=ts(terrorism_num)
# 绘图
opar<-par(mfrow=c(2,1))
plot(terr_num,type="l",xlab="时间",ylab="剂量",main="海洛因剂量随时间分布")
acf(terr_num,main="自相关图",xlab="滞后阶数")
par(opar)
# R里面的auto.arima()函数就是通过选取AIC和BIC最小来选取模型的
p_d_q=auto.arima(terr_num)
p_d_q
# Series: terr_num
# ARIMA(2,1,0) with drift
# method 	模型参数估计的方法，“ML”极大似然估计，”CSS”条件最小二乘估计，“CSS-ML”
model2<-arima(terr_num,order=c(2,1,0),method="ML")
model2
accuracy(model2)
# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=10, level = c(99.5))
forecast
plot(forecast(model2, h=10, level = c(99.5)),xlab="时间",ylab="剂量")
library(forecast)
library(tseries)
library(fUnitRoots)
terrorism_num=c(290,186,292,757,551,631,824,753)
# 时间序列（使用ts()函数进行时间序列转化）
terr_num=ts(terrorism_num)
# 绘图
opar<-par(mfrow=c(2,1))
plot(terr_num,type="l",xlab="时间",ylab="剂量",main="海洛因剂量随时间分布")
acf(terr_num,main="自相关图",xlab="滞后阶数")
par(opar)
# R里面的auto.arima()函数就是通过选取AIC和BIC最小来选取模型的
p_d_q=auto.arima(terr_num)
p_d_q
# Series: terr_num
# ARIMA(2,1,0) with drift
# method 	模型参数估计的方法，“ML”极大似然估计，”CSS”条件最小二乘估计，“CSS-ML”
model2<-arima(terr_num,order=c(2,1,0),method="ML")
model2
accuracy(model2)
# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=5, level = c(99.5))
forecast
plot(forecast(model2, h=5, level = c(99.5)),xlab="时间",ylab="剂量")
library(forecast)
library(tseries)
library(fUnitRoots)
terrorism_num=c(1258,114,124,1818,330,133,387,322)
# 时间序列（使用ts()函数进行时间序列转化）
terr_num=ts(terrorism_num)
# 绘图
opar<-par(mfrow=c(2,1))
plot(terr_num,type="l",xlab="时间",ylab="剂量",main="海洛因剂量随时间分布")
acf(terr_num,main="自相关图",xlab="滞后阶数")
par(opar)
# R里面的auto.arima()函数就是通过选取AIC和BIC最小来选取模型的
p_d_q=auto.arima(terr_num)
p_d_q
# Series: terr_num
# ARIMA(2,1,0) with drift
# method 	模型参数估计的方法，“ML”极大似然估计，”CSS”条件最小二乘估计，“CSS-ML”
model2<-arima(terr_num,order=c(2,1,0),method="ML")
model2
accuracy(model2)
# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=5, level = c(99.5))
forecast
plot(forecast(model2, h=5, level = c(99.5)),xlab="时间",ylab="剂量")
library(forecast)
library(tseries)
library(fUnitRoots)
terrorism_num=c(420,515,702,929,1081,1446,1513,1377)
# 时间序列（使用ts()函数进行时间序列转化）
terr_num=ts(terrorism_num)
# 绘图
opar<-par(mfrow=c(2,1))
plot(terr_num,type="l",xlab="时间",ylab="剂量",main="海洛因剂量随时间分布")
acf(terr_num,main="自相关图",xlab="滞后阶数")
par(opar)
# R里面的auto.arima()函数就是通过选取AIC和BIC最小来选取模型的
p_d_q=auto.arima(terr_num)
p_d_q
# Series: terr_num
# ARIMA(2,1,0) with drift
# method 	模型参数估计的方法，“ML”极大似然估计，”CSS”条件最小二乘估计，“CSS-ML”
model2<-arima(terr_num,order=c(2,1,0),method="ML")
model2
accuracy(model2)
# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=5, level = c(99.5))
forecast
plot(forecast(model2, h=5, level = c(99.5)),xlab="时间",ylab="剂量")
library(forecast)
library(tseries)
library(fUnitRoots)
terrorism_num=c(137,179,318,451,490,665,586,634)
# 时间序列（使用ts()函数进行时间序列转化）
terr_num=ts(terrorism_num)
# 绘图
opar<-par(mfrow=c(2,1))
plot(terr_num,type="l",xlab="时间",ylab="剂量",main="海洛因剂量随时间分布")
acf(terr_num,main="自相关图",xlab="滞后阶数")
par(opar)
# R里面的auto.arima()函数就是通过选取AIC和BIC最小来选取模型的
p_d_q=auto.arima(terr_num)
p_d_q
# Series: terr_num
# ARIMA(2,1,0) with drift
# method 	模型参数估计的方法，“ML”极大似然估计，”CSS”条件最小二乘估计，“CSS-ML”
model2<-arima(terr_num,order=c(2,1,0),method="ML")
model2
accuracy(model2)
# 模型评价###############################
qqnorm(model2$residuals)
qqline(model2$residuals)
Box.test(model2$residuals,type="Ljung-Box")
# 从画出的QQ图和LB检验的结果来看，残差符合正态性假设且不相关，
# 则认为模型拟合数据比较充分，可以用来进行下一步预测。
# 预测###################################
forecast=forecast(model2, h=5, level = c(99.5))
forecast
plot(forecast(model2, h=5, level = c(99.5)),xlab="时间",ylab="剂量")
install.packages(c("devtools","roxygen2","testthat","knitr","usethis"))
install.packages("usethis")
install.packages("usethis")
usethis::create_package(path = "D:\rPackage")
usethis::create_package(path = "D:\rPackage")
usethis::create_package(path = "D:\rPackageTutorial")
usethis::create_package(path = "rPackageTutorial")
getwd()
setwd('D:\R')
setwd('D:/R')
getwd()
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
source("D:/R/Rpackage/R/fibonacci_compare.R", encoding = 'UTF-8')
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
Rcpp::sourceCpp("Rpackage/R/fibonacci_c.cpp")
library(Rcpp)
cpptxt <- '
int fibonacci_c(const int x){
if(x < 2)
return x;
else
return (fibonacci_c(x - 1) + fibonacci_c(x - 2));
}'
fibCpp <- Rcpp::cppFunction(cpptxt)
install.packages("installr")
require(installr)
library(Rcpp)
cpptxt <- '
int fibonacci_c(const int x){
if(x < 2)
return x;
else
return (fibonacci_c(x - 1) + fibonacci_c(x - 2));
}'
fibCpp <- Rcpp::cppFunction(cpptxt)
fibCpp(39)
.libPaths()
setwd('D:/R_learn/FibonacciPackage')
devtools::test()
rm(list = c("fibonacci"))
devtools::test()
devtools::check()
devtools::document()
devtools::test()
devtools::check()
remove.packages("Rcpp")
devtools::check()
rlang::last_error()
rlang::last_trace()
install.packages("Rcpp")
install.packages("Rcpp")
devtools::check()
devtools::test()
devtools::check()
devtools::document()
source("D:/R_learn/FibonacciPackage/R/fibonacci_c.R")
library(Rcpp)
cpptxt <- '
int fibonacci_c(const int x){
if(x < 2)
return x;
else
return (fibonacci_c(x - 1) + fibonacci_c(x - 2));
}'
fibCpp <- Rcpp::cppFunction(cpptxt)
fibonacci_c(39)
#' Fibonacci sequence
#'
#' @param n A number
#'
#' @return The digit in the sequence
#' @export
#'
#' @examples
#' fibonacci(5)
#' fibonacci(12)
fibonacci <- function(n) {
if (n==0)
return (0)
if (n==1)
return (1)
return (fibonacci(n-1) + fibonacci(n-2))
}
fibonacci()
fibonacci(5)
devtools::test()
rm(list = c("fibonacci"))
cpptxt <- '
int fibonacci_c(const int x){
if(x < 2)
return x;
else
return (fibonacci_c(x - 1) + fibonacci_c(x - 2));
}'
fibCpp <- cppFunction(cpptxt)
fibCpp(39)
devtools::test()
devtools::check()
devtools::check()
devtools::check()
source("D:/R_learn/FibonacciPackage/R/fibonacci_c.R")
source("D:/R_learn/FibonacciPackage/R/fibonacci_c.R")
fibonacci_c(39)
devtools::test()
devtools::check()
writeLines('PATH="${RTOOLS42_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
devtools::load_all()
library(Rcpp)
sourceCpp("D:/R_learn/fibonacci.cpp")
source("D:/R_learn/FibonacciPackage/R/fibonacci_c.R")
fibonacci_c(39)
devtools::test()
devtools::check()
devtools::use_package("Rcpp")
devtools::loaded_packages()
devtools::load_all()
search()
devtools::check()
cpptxt <- '
int fibonacci_c(const int x){
if(x < 2)
return x;
else
return (fibonacci_c(x - 1) + fibonacci_c(x - 2));
}'
fibCpp <- Rcpp::cppFunction(cpptxt)
fibCpp(39)
devtools
devtools::test()
devtools::use_rcpp()
devtools::document()
fibonacci_c(39)
library(FibonacciPackage)
fibonacci_c(39)
fibonacci_c <- function(x) {
.Call('_FibonacciPackage_fibonacci_c', PACKAGE = 'FibonacciPackage', x)
}
fibonacci_c(39)
library(FibonacciPackage)
fibonacci_c(39)
devtools::document()
fibonacci_c(39)
rm('fibonacci_c')
rm('fibCpp')
devtools::document()
devtools::load_all()
fibonacci_c(39)
devtools::test()
library(FibonacciPackage)
fibonacci_c(39)
devtools::document()
devtools::load_all()
#' Fibonacci sequence
#'
#' @param n A number
#'
#' @return The digit in the sequence
#' @export
#'
#' @examples
#' fibonacci(5)
#' fibonacci(12)
fibonacci <- function(n) {
if (n==0)
return (0)
if (n==1)
return (1)
return (fibonacci(n-1) + fibonacci(n-2))
}
fibonacci_c(30)
FibonacciPackage::fibonacci(5)
library(FibonacciPackage)
fibonacci_c <- function(x) {
.Call(`_FibonacciPackage_fibonacci_c`, x)
}
fibonacci_c(39)
fibonacci_c(39)
fibonacci_c <- function(x) {
.Call(`fibonacci_c`, x)
}
fibonacci_c(39)
fibonacci_c(39)
fibonacci_c <- function(x) {
.Call(`fibonacci_c`, PACKAGE = 'FibonacciPackage', x)
}
fibonacci_c(39)
rm('fibonacci_c')
devtools::document()
library(FibonacciPackage)
update.packages("devtools")
library(devtools)
remove.packages("devtools")
options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::use_rcpp()
use_rcpp()
use_rcpp()
use_rcpp()
document()
rm(list = c("fibonacci"))
document()
library(FibonacciPackage)
fibonacci_c(39)
test()
fibonacci_c(39)
fibonacci_c(39)
library(FibonacciPackage)
fibonacci_c(39)
load_all()
fibonacci_c(39)
test()
check()
use_cpp()
devtools::document()
rm(list = c("fibonacci"))
devtools::load_all()
rm(list = c("fibonacci"))
fibonacci_c(50)
fibonacci_c(40)
fibonacci(40)
library(FibonacciPackage)
quit
quit()
library(FibonacciPackage)
devtools::document()
rm(list = c("fibonacci"))
devtools::load_all()
fibonacci_c(50)
fibonacci_c(40)
fibonacci_c(45)
fibonacci_c(49)
fibonacci_c(60)
fibonacci_c(100)
fibonacci_c(200)
Rcpp::sourceCpp("src/fibonacci.cpp")
fibonacci_c(200)
fibonacci_c(3)
fibonacci_c(4)
fibonacci_c(5)
fibonacci_c(25)
library(FibonacciPackage)
remove.packages("FibonacciPackage")
library(FibonacciPackage)
devtools::document()
rm(list = c("fibonacci"))
devtools::load_all()
fibonacci_c(50)
fibonacci_c(100)
fibonacci_c(200)
devtools::document()
devtools::load_all()
fibonacci(50)
fibonacci(100)
fibonacci(1000)
fibonacci(100000)
devtools::document()
devtools::load_all()
fibonacci(100000)
fibonacci(100)
fibonacci(20)
fibonacci(30)
fibonacci(40)
fibonacci(50)
fibonacci_c(26)
fibonacci_c(3)
fibonacci_c(27)
fibonacci_c(28)
fibonacci_c(29)
fibonacci_c(30)
fibonacci_c(31)
fibonacci_c(32)
fibonacci_c(33)
fibonacci_c(34)
fibonacci_c(35)
fibonacci_c(36)
fibonacci_c(37)
fibonacci_c(38)
fibonacci_c(39)
fibonacci_c(40)
devtools::document()
devtools::load_all()
fibonacci(3)
devtools::document()
devtools::load_all()
fibonacci(3)
devtools::test()
devtools::check()
devtools::document()
devtools::check()
install.packages("D:/R/FibonacciPackage_0.2.0.tar.gz",repos=NULL)
install.packages("D:/R_learn/FibonacciPackage_0.2.0.tar.gz",repos=NULL)
library(FibonacciPackage)
devtools::document()
devtools::load_all()
fibonacci_c(41)
fibonacci_c(42)
fibonacci_c(43)
fibonacci_c(44)
fibonacci_c(47)
fibonacci_c(50)
fibonacci_c(55)
fibonacci_c(60)
fibonacci_c(65)
devtools::document()
devtools::load_all()
library(FibonacciPackage)
m <- c(0:101)
n <- m[seq(1,101,10)]
n1 <- n[-which(n == "0")]
for (x in n1) {
# #首先测试R函数速度
t1 <- proc.time()
r1 <- fibonacci(x)
t2 <- proc.time()
t <- t2 - t1
print(paste('R函数在n=',x,'时执行结果为：',r1,' 执行时间为: ',sprintf("%0.14f", t[3][[1]]),'秒'))
#接着测试Rcpp函数速度
t1 <- proc.time()
r2 <- fibonacci_c(x)
t2 <- proc.time()
t <- t2 - t1
print(paste('Rcpp函数在n=',x,'时执行结果为：',r2,' 执行时间为: ',sprintf("%0.14f", t[3][[1]]),'秒'))
}
m <- c(0:10001)
n <- m[seq(1,10001,200)]
n1 <- n[-which(n == "0")]
for (x in n1) {
# #首先测试R函数速度
t1 <- proc.time()
r1 <- fibonacci(x)
t2 <- proc.time()
t <- t2 - t1
print(paste('R函数在n=',x,'时执行结果为：',r1,' 执行时间为: ',sprintf("%0.14f", t[3][[1]]),'秒'))
#接着测试Rcpp函数速度
t1 <- proc.time()
r2 <- fibonacci_c(x)
t2 <- proc.time()
t <- t2 - t1
print(paste('Rcpp函数在n=',x,'时执行结果为：',r2,' 执行时间为: ',sprintf("%0.14f", t[3][[1]]),'秒'))
}
